{
    "patches": [
        {
            "label": "2025-10-26_20-19-27",
            "content": "@@ -3574,28 +3574,28 @@\n arregada%0Abat\n+t\n er\n-ia\n+y\n .mostrar()  \n",
            "lines": "144"
        },
        {
            "label": "2025-10-26_20-20-54",
            "content": "class Bateria:\n    def __init__(self, capacidade: int):\n        self.__capacidade: int = capacidade\n        self.__carga: int = capacidade\n\n    def getCapacidade(self):\n        return self.__capacidade\n\n    def getCarga(self):\n        return self.__carga\n\n    def setCarga(self, valor: int):\n        self.__carga = max(0, min(valor, self.__capacidade))\n\n    def mostrar(self):\n        print(f\"({self.__carga}/{self.__capacidade})\")\n\n\nclass Carregador:\n    def __init__(self, potencia: int):\n        self.__potencia: int = potencia\n\n    def getPotencia(self):\n        return self.__potencia\n\n    def mostrar(self):\n        print(f\"(Pot\u00eancia {self.__potencia})\")\n\n\nclass Notebook:\n    def __init__(self):\n        self.__ligado: bool = False\n        self.__bateria: Bateria | None = None\n        self.__carregador: Carregador | None = None\n\n    def mostrar(self):\n        status = \"Ligado\" if self.__ligado else \"Desligado\"\n        bat = f\"({self.__bateria.getCarga()}/{self.__bateria.getCapacidade()})\" if self.__bateria else \"Nenhuma\"\n        car = f\"(Pot\u00eancia{self.__carregador.getPotencia()})\" if self.__carregador else \"Desconectado\"\n        print(f\"Status: {status}, Bateria: {bat}, Carregador: {car}\")\n\n    def ligar(self):\n        if (self.__bateria and self.__bateria.getCarga() > 0) or self.__carregador:\n            self.__ligado = True\n            print(\"notebook ligado\")\n\n        else:\n            print(\"n\u00e3o foi poss\u00edvel ligar\")\n\n    def desligar(self):\n        if self.__ligado:\n            self.__ligado = False\n            print(\"notebook desligado\")\n\n    def usar(self, tempo: int):\n        if not self.__ligado:\n            print(\"notebook desligado\")\n            return\n\n        if not self.__bateria and not self.__carregador:\n            print(\"erro: sem bateria e sem carregador\")\n            self.__ligado = False\n            return \n\n        if self.__bateria is None:\n            print(\"Notebook utilizado com sucesso (carregador apenas)\")\n            return\n\n        carga = self.__bateria.getCarga()\n\n        if self.__carregador is None:\n            if carga == 0:\n                print(\"notebook descarregado\")\n                self.__ligado = False\n                return\n            if tempo > carga:\n                print(f\"Usando por {carga} minutos, notebook descarregou\")\n                self.__bateria.setCarga(0)\n                self.__ligado = False\n            else:\n                print(f\"Usando por {tempo} minutos\")\n                self.__bateria.setCarga(carga - tempo)\n        \n        else:\n            potencia = self.__carregador.getPotencia()\n            nova_carga = carga - tempo + tempo * potencia\n            self.__bateria.setCarga(nova_carga)\n            print(\"Notebook utilizado com sucesso\")\n\n    def setBateria(self, bateria: Bateria):\n        self.__bateria = bateria\n\n    def rmBateria(self):\n        if self.__bateria:\n            print(\"bateria removida\")\n        b = self.__bateria\n        self.__bateria = None\n        return b\n\n    def setCarregador(self, carregador: Carregador):\n        self.__carregador = carregador\n\n    def rmCarregador(self):\n        if self.__carregador:\n            print(\"carregador removido\")\n        c = self.__carregador\n        self.__carregador = None\n        return c\n\n\n\nnotebook = Notebook() # criando notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nnotebook.usar(10)     # msg: notebook desligado\n\nbateria = Bateria(50) # criando bateria que suporta 50 minutos e come\u00e7a carregada\nbateria.mostrar()     # (50/50)\nnotebook.setBateria(bateria) # coloca a bateria no notebook\n\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (50/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 30 minutos\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: Desconectado\nnotebook.usar(30)  # msb: Usando por 20 minutos, notebook descarregou\nnotebook.mostrar() # msg: Status: Desligado, Bateria: (0/50), Carregador: Desconectado\n\nbateria = notebook.rmBateria() # msg: bateria removida\nbateria.mostrar()  # (0/50)\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: Desconectado\n\ncarregador = Carregador(2) # criando carregador com 2 de potencia\ncarregador.mostrar() # (Pot\u00eancia 2)\n\nnotebook.setCarregador(carregador) # adicionando carregador no notebook\nnotebook.mostrar() # msg: Status: Desligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\nnotebook.ligar()   # msg: notebook ligado\nnotebook.mostrar() # msg: Status: Ligado, Bateria: Nenhuma, Carregador: (Pot\u00eancia 2)\n\nnotebook.setBateria(bateria)\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (0/50), Carregador: (Pot\u00eancia 2)\nnotebook.usar(10)  # msg: Notebook utilizado com sucesso\nnotebook.mostrar() # msg: Status: Ligado, Bateria: (20/50), Carregador: (Pot\u00eancia 2)",
            "lines": "144"
        }
    ]
}